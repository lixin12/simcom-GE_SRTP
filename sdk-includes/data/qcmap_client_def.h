#ifndef _QCMAP_CLIENT_DEF_H
#define _QCMAP_CLIENT_DEF_H

#define WEP_KEY0_ONLY

#define GETMOBILECONNECTION "GetMobileConnection"
#define SETMOBILECONNECTION "SetMobileConnection"
#define ADDSNATENTRY "AddSnatEntry"
#define GETSNATENTRIES "GetSnatEntries"
#define GETMEDIA_DIR_LIST "GetMediaDir"
#define SETMEDIA_DIR_LIST "SetMediaDir"
#define SETNATSETTINGS "SetNatSettings"
#define GETNATSETTINGS "GetNatSettings"
//#define SETFIREWALLENTRIES "SetFirewallEntry"
#define DELETEALLFIREWALL "DeleteAllFirewall"
//#define GETFIREWALLCONFIG "GetConfigFirewall"
#define FIREWALLPAGE "FirewallPage"
#define IPV6SETWWAN "SetWWANv6"
#define IPV6GETWWAN "GetWWANv6"
#define GETIPV6PAGE "Getipv6page"
#define WWAN_STAT_MAX 6
#define DEBUG_PRINT 1
#define SETLAN_CONFIG "SetLanConfig"
#define GETLAN_CONFIG "GetLanConfig"
#define SETWWANIPV4 "SetWWANIPV4"
#define GETWWANIPV4 "GetWWANIPV4"
#define GETUPNPDLNA "GetMediaSharingStatus"
#define SETUPNPDLNA "SetMediaSharingStatus"
#define GETDATARATE "GetDATASTATS"
#define GETHOSTAPDBASECFG "GetHostAPDBaseCfg"
#define SETHOSTAPDBASECFG "SetHostAPDBaseCfg"
#define GETHOSTAPDEXTCFG "GetHostAPDExtCfg"
#define SETHOSTAPDEXTCFG "SetHostAPDExtCfg"
#define GETHOSTAPDMACFILTER "GetHostAPDMacFilter"
#define SETHOSTAPDMACFILTER "SetHostAPDMacFilter"
#define GETPROFILESETTINGS "GetProfileSettings"
#define GETPROFILELIST "GetProfileList"
#define CREATEPROFILE "CreateProfile"
#define DELETEPROFILE "DeleteProfile"
#define MODIFYPROFILE "ModifyProfile"
#define GETDEFAULTPROFILE "GetDefaultProfile"
#define SETDEFAULTPROFILE "SetDefaultProfile"
#define GETDMSSTATUS "GetDMSStatus"
#define GETFIREWALLSTATUS "GetFirewallStatus"
#define GETDMZIP "GetDMZIP"
#define CLOSEDMZ "CloseDMZ"

#define GETPINGSTATE "GetPingState"
#define SETPINGSTATE "SetPingState"

#define GETSYSTEMPREFERENCE "GetSystemPreference"
#define SETSYSTEMPREFERENCE "SetSystemPreference"
#define GETSUPPORTEDPREFERENCE "GetSupportedPreference"

#define GETPINSTATUS "GetPINStatus"
#define SETPINPROTECTION "SetPINProtection"
#define VERIFYPIN "VerifyPIN"
#define CHANGEPIN "ChangePIN"
#define UNBLOCKPIN "UnblockPIN"

#define GETWMSLIST "GetWmsList"
#define WMSREAD "WMSRead"
#define WMSDELETE "WMSDelete"
#define WMSSEND "WMSSend"
#define WMSWRITE "WMSWrite"
#define WMS_SENDFROMMEM "WMS_SendFromMem"
#define WMS_SETEVENTREPORT "WMS_SetEventReport"
#define WMS_GETSTOREMAXSIZE "WMS_GetStoreMaxSize"
#define WMS_GETMEMSTATUS "WMS_GetMemStatus"
#define WMS_MODIFYTAG "WMS_ModifyTag"
#define GETHEADSTATUS "GetHeadStatus"

#define SETDHCP_CONFIG "SetDHCPConfig"
#define GETDHCP_CONFIG "GetDHCPConfig"

#define REBOOT "Reboot"
#define SETMOBILEAP "SetMobileAP"
#define NETCNCT "NetCnct"
#define SETUSRINFO "SetUsrInfo"
#define RESTORE "Restore"
#define MAP_CFG_FILE "/data/mobileap_enable_cfg" //modify by dyy
#define MAP_FIX_CFG_FILE "/data/mobileap_fix_enable_cfg" //modify by zxs
#define MAP_NETSTATUS_FILE "/data/net_status" //add by dyy
#define GETWPASUPPLICANTCFG  "GetWpaSupplicantCfg"
#define SETWPASUPPLICANTCFG  "SetWpaSupplicantCfg"
#define GETSTAIP  "GetStaIP" //for AT+CWSTAIP, add by dyy
#define RTLSTAINIT "RtlStaInit"//for AT+CWSTAINIT, add by dyy

/* mask the relevant request received from CGI for execution */
typedef enum
{
  FIELD_MASK_1 = 0x01,
  FIELD_MASK_2 = 0x02,
  FIELD_MASK_3 = 0x04,
  FIELD_MASK_4 = 0x08,
  FIELD_MASK_5 = 0x10,
  FIELD_MASK_6 = 0x20,
  FIELD_MASK_7 = 0x40,
  FIELD_MASK_8 = 0x80,
  FIELD_MASK_9 = 0x100,
  FIELD_MASK_10 = 0x200,
  FIELD_MASK_11 = 0x400,
  FIELD_MASK_12 = 0x800,
  FIELD_MASK_13 = 0x1000,
  FIELD_MASK_14 = 0x2000,
  FIELD_MASK_15 = 0x4000,
  FIELD_MASK_16 = 0x8000,
  FIELD_MASK_17 = 0x10000,
  FIELD_MASK_18 = 0x20000,
  FIELD_MASK_19 = 0x40000,
  FIELD_MASK_20 = 0x80000,
  FIELD_MASK_MAX
}field_mask;

typedef enum
{
  MOBILE_AP_PAGE_PAGE = 0,
  MOBILE_AP_PAGE_MASK,
  MOBILE_AP_PAGE_AUTO_CONNECT,
  MOBILE_AP_PAGE_AUTO_CONNECT_RESULT,
  MOBILE_AP_PAGE_ROAMING ,
  MOBILE_AP_PAGE_ROAMING_RESULT ,
  MOBILE_AP_PAGE_MAX //never used
}mobile_ap_field;
typedef enum
{
  GET_MEDIA_DIR_PAGE_PAGE = 0,
  GET_MEDIA_DIR_PAGE_RESULT,
  GET_MEDIA_DIR_PAGE_DIR_LIST,
  GET_MEDIA_DIR_PAGE_MAX //never used
}get_media_dir_field;

typedef enum
{
  SET_MEDIA_DIR_PAGE_PAGE = 0,
  SET_MEDIA_DIR_PAGE_ADD_MODIFY,
  SET_MEDIA_DIR_PAGE_DIR_LIST,
  SET_MEDIA_DIR_PAGE_RESULT,
  SET_MEDIA_DIR_PAGE_MAX //never used
}set_media_dir_field;

typedef enum
{
  UPNP_DLNA_PAGE_PAGE = 0,
  UPNP_DLNA_PAGE_MASK,
  UPNP_DLNA_PAGE_UPNP_RESULT,
  UPNP_DLNA_PAGE_UPNP_ENABLE,
  UPNP_DLNA_PAGE_DLNA_RESULT ,
  UPNP_DLNA_PAGE_DLNA_ENABLE ,
  UPNP_DLNA_PAGE_MDNS_RESULT ,
  UPNP_DLNA_PAGE_MDNS_ENABLE ,
  UPNP_DLNA_PAGE_MAX //never used
}upnp_dlna_field;


typedef enum
{
  UPNP_DLNA_NOTIFY_PAGE_PAGE = 0,
  UPNP_DLNA_NOTIFY_PAGE_MASK,
  UPNP_DLNA_NOTIFY_PAGE_UPNP_RESULT,
  UPNP_DLNA_NOTIFY_PAGE_UPNP,
  UPNP_DLNA_NOTIFY_PAGE_DLNA_RESULT ,
  UPNP_DLNA_NOTIFY_PAGE_DLNA,
  UPNP_DLNA_NOTIFY_PAGE_MAX //never used
}upnp_dlna_notify_field;

typedef enum
{
  WWAN_IPV4_PAGE_PAGE = 0,
  WWAN_IPV4_PAGE_MASK,
  WWAN_IPV4_PAGE_IPV4_ENABLE,
  WWAN_IPV4_PAGE_IPV4_ENABLE_RESULT,
  WWAN_IPV4_PAGE_BACKHAUL,
  WWAN_IPV4_PAGE_BACKHAUL_RESULT,
  WWAN_IPV4_PAGE_TECH_RESULT,
  WWAN_IPV4_PAGE_NETP_TECHNOLOGY,
  WWAN_IPV4_PAGE_NETP_TECH_IPV4,
  WWAN_IPV4_PAGE_NETP_TECH2_IPV4,
  WWAN_IPV4_PAGE_MAX //never used
}wwan_ipv4_field;

typedef enum
{
  LAN_PAGE_PAGE = 0,
  LAN_PAGE_MASK,
  //LAN_PAGE_CONFIG_RESULE,
  //LAN_PAGE_WLAN_STATUS_RESULT,
  //LAN_PAGE_WLAN_CONFIG_RESULT,
  LAN_PAGE_LAN_AP_GW_IP ,
  LAN_PAGE_LAN_AP_SUBNET_MASK ,
  LAN_PAGE_LAN_AP_DHCP_MODE ,
  LAN_PAGE_LAN_AP_DHCP_START_IP ,
  LAN_PAGE_LAN_AP_DHCP_END_IP ,
  LAN_PAGE_LAN_AP_DHCP_LEASE_TIME ,
  LAN_PAGE_WLAN_ENABLE_DISABLE ,
  LAN_PAGE_WLAN_MODE ,
  LAN_PAGE_WLAN_PROFILE,
  LAN_PAGE_WLAN_AP_STA_MODE ,
  LAN_PAGE_WLAN_AP_STA_STATIC_IP ,
  LAN_PAGE_WLAN_AP_STA_GW_IP ,
  LAN_PAGE_WLAN_AP_STA_STATIC_DNS_IP ,
  LAN_PAGE_WLAN_AP_STA_STATIC_SUBNET_MASK ,
  LAN_PAGE_MAX //never used
}lan_page_field;

typedef enum
{
  DHCP_RESERVATION_SETTINGS_PAGE_PAGE=0,
  DHCP_RESERVATION_SETTINGS_PAGE_ADD_DELETE_MODIFY_SNAT,
  DHCP_RESERVATION_SETTINGS_PAGE_IP_ADDR,
  DHCP_RESERVATION_SETTINGS_PAGE_MAC_ADDR,
  DHCP_RESERVATION_SETTINGS_PAGE_RESERVED_IP,
  DHCP_RESERVATION_SETTINGS_PAGE_DEVICE_NAME,
  DHCP_RESERVATION_SETTINGS_PAGE_ENABLE_RESERVATION,
  DHCP_RESERVATION_SETTINGS_PAGE_MAX //never used
}dhcp_reservation_field;

typedef enum
{
  NAT_SETTINGS_PAGE_PAGE=0,
  NAT_SETTINGS_PAGE_MASK,
  NAT_SETTINGS_PAGE_NAT_TYPE,
  NAT_SETTINGS_PAGE_NAT_TYPE_RESULT,
  NAT_SETTINGS_PAGE_DMZ_IP,
  NAT_SETTINGS_PAGE_DMZ_IP_RESULT,
  NAT_SETTINGS_PAGE_IPSEC_VPN_PASSTHROUGH,
  NAT_SETTINGS_PAGE_IPSEC_VPN_PASSTHROUGH_RESULT,
  NAT_SETTINGS_PAGE_PPTP_VPN_PASSTHROUGH,
  NAT_SETTINGS_PAGE_PPTP_VPN_PASSTHROUGH_RESULT,
  NAT_SETTINGS_PAGE_L2TP_VPN_PASSTHROUGH,
  NAT_SETTINGS_PAGE_L2TP_VPN_PASSTHROUGH_RESULT,
  NAT_SETTINGS_PAGE_NAT_GEN_TIMEOUT,
  NAT_SETTINGS_PAGE_NAT_GEN_TIMEOUT_RESULT,
  NAT_SETTINGS_PAGE_NAT_ICMP_TIMEOUT,
  NAT_SETTINGS_PAGE_NAT_ICMP_TIMEOUT_RESULT,
  NAT_SETTINGS_PAGE_NAT_TCP_TIMEOUT,
  NAT_SETTINGS_PAGE_NAT_TCP_TIMEOUT_RESULT,
  NAT_SETTINGS_PAGE_NAT_UDP_TIMEOUT,
  NAT_SETTINGS_PAGE_NAT_UDP_TIMEOUT_RESULT,
  NAT_SETTINGS_PAGE_WEBSERVER_WWAN_ACCESS,
  NAT_SETTINGS_PAGE_WEBSERVER_WWAN_ACCESS_RESULT,
  NAT_SETTINGS_PAGE_MAX //never used
}nat_settings_page_field;

typedef enum
{
  STATIC_NAT_SETTINGS_PAGE_PAGE=0,
  STATIC_NAT_SETTINGS_PAGE_MASK,
  STATIC_NAT_SETTINGS_PAGE_ADD_DELETE_MODIFY_SNAT,
  STATIC_NAT_SETTINGS_PAGE_PRIVATE_IP_ADDR,
  STATIC_NAT_SETTINGS_PAGE_PRIVATE_PORT,
  STATIC_NAT_SETTINGS_PAGE_GLOBAL_PORT,
  STATIC_NAT_SETTINGS_PAGE_PROTOCOL,
  STATIC_NAT_SETTINGS_PAGE_OLD_PRIVATE_IP_ADDR,
  STATIC_NAT_SETTINGS_PAGE_OLD_PRIVATE_PORT,
  STATIC_NAT_SETTINGS_PAGE_OLD_GLOBAL_PORT,
  STATIC_NAT_SETTINGS_PAGE_OLD_PROTOCOL,
  STATIC_NAT_SETTINGS_PAGE_MAX //never used
}static_nat_page_field;
typedef enum
{
  WWAN_STATS_PAGE_PAGE = 0,
  WWAN_STATS_PAGE_GET_RESET_MODE,
  WWAN_STATS_PAGE_IP_FAMILY,
  WWAN_STATS_PAGE_RESULT,
  WWAN_STATS_PAGE_BYTES_RX,
  WWAN_STATS_PAGE_BYTES_TX,
  WWAN_STATS_PAGE_PACKETS_RX,
  WWAN_STATS_PAGE_PACKETS_TX,
  WWAN_STATS_PAGE_PACKET_DROPPED_RX,
  WWAN_STATS_PAGE_PACKET_DROPPED_TX,
  WWAN_STATS_PAGE_CONFIG_ERROR,
  WWAN_STATS_PAGE_PUBLIC_IP,
  WWAN_STATS_PAGE_DNS_PRI,
  WWAN_STATS_PAGE_DNS_SEC,
  WWAN_STATS_PAGE_STATUS_ERROR,
  WWAN_STATS_PAGE_STATUS,
  WWAN_STATS_PAGE_STA_RESULT,
  WWAN_STATS_PAGE_STA_STATUS,
  WWAN_STATS_PAGE_MAX //never used
}wwan_stats_page;
typedef enum
{
  DATA_RATE_PAGE_PAGE = 0,
  DATA_RATE_PAGE_RESULT,
  DATA_RATE_PAGE_BYTES_TX,
  DATA_RATE_PAGE_BYTES_RX,
  DATA_RATE_PAGE_BYTES_TX_MAX,
  DATA_RATE_PAGE_BYTES_RX_MAX,
  DATA_RATE_PAGE_MAX //never used
}data_rate_page;

typedef enum
{
  FIREWALL_SETTINGS_PAGE_PAGE = 0,
  FIREWALL_SETTINGS_PAGE_MASK,
  FIREWALL_SETTINGS_PAGE_FIREWALL_STATE,
  FIREWALL_SETTINGS_PAGE_PACKETS_ALLOWED,
  FIREWALL_SETTINGS_PAGE_FIREWALL_HANDLE,
  FIREWALL_SETTINGS_PAGE_IP_FAMILY,
  FIREWALL_SETTINGS_PAGE_NEXT_HEADER_PROTO_VALID,
  FIREWALL_SETTINGS_PAGE_NEXT_HEADER_PROTO,
  FIREWALL_SETTINGS_PAGE_TCPUDP_SRC_VALID,
  FIREWALL_SETTINGS_PAGE_TCPUDP_SRC_PORT,
  FIREWALL_SETTINGS_PAGE_TCPUDP_SRC_PORT_RANGE,
  FIREWALL_SETTINGS_PAGE_TCPUDP_DST_VALID,
  FIREWALL_SETTINGS_PAGE_TCPUDP_DST_PORT,
  FIREWALL_SETTINGS_PAGE_TCPUDP_DST_PORT_RANGE,
  FIREWALL_SETTINGS_PAGE_ICMP_TYPE_VALID,
  FIREWALL_SETTINGS_PAGE_ICMP_TYPE,
  FIREWALL_SETTINGS_PAGE_ICMP_CODE_VALID,
  FIREWALL_SETTINGS_PAGE_ICMP_CODE,
  FIREWALL_SETTINGS_PAGE_ESPSPI_VALID,
  FIREWALL_SETTINGS_PAGE_ESPSPI,
  FIREWALL_SETTINGS_PAGE_IPV4_SRC_VALID,
  FIREWALL_SETTINGS_PAGE_IPV4_SRC_ADDR,
  FIREWALL_SETTINGS_PAGE_IPV4_SRC_SUBNET,
  FIREWALL_SETTINGS_PAGE_IPV4_TOS_VALID,
  FIREWALL_SETTINGS_PAGE_IPV4_TOS_VALUE,
  FIREWALL_SETTINGS_PAGE_IPV4_TOS_MASK,
  FIREWALL_SETTINGS_PAGE_IPV6_SRC_VALID,
  FIREWALL_SETTINGS_PAGE_IPV6_SRC_ADDR,
  FIREWALL_SETTINGS_PAGE_IPV6_SRC_PREFIX_LENGTH,
  FIREWALL_SETTINGS_PAGE_IPV6_CLASS_VALID,
  FIREWALL_SETTINGS_PAGE_IPV6_CLASS,
  FIREWALL_SETTINGS_PAGE_IPV6_MASK,
  FIREWALL_SETTINGS_PAGE_MAX //never used
}firewall_settings_page_field;

typedef enum
{
  FIREWALL_SETTINGS_GET_PAGE_PAGE = 0,
  FIREWALL_SETTINGS_GET_PAGE_IP_FAMILY
}firewall_settings_get_page_field;


typedef enum
{
  IPV6_WWAN_SETTINGS_PAGE_PAGE = 0,
  IPV6_WWAN_SETTINGS_PAGE_MASK,
  IPV6_WWAN_SETTINGS_PAGE_ENABLE,
  IPV6_WWAN_SETTINGS_PAGE_ENABLE_RESULT,
  IPV6_WWAN_SETTINGS_PAGE_BACKHAUL,
  IPV6_WWAN_SETTINGS_PAGE_BACKHAUL_RESULT,
  IPV6_WWAN_SETTINGS_PAGE_POLICY_RESULT,
  IPV6_WWAN_SETTINGS_PAGE_TECH_PREF,
  IPV6_WWAN_SETTINGS_PAGE_PROFILE_ID_GPP,
  IPV6_WWAN_SETTINGS_PAGE_PROFILE_ID_GPP2,
  IPV6_WWAN_SETTINGS_PAGE_MAX
}ipv6_wwan_settings_page_field;

typedef enum
{
IPV6_GET_STATE_RESULT=1,
IPV6_GET_STATE,
IPV6_GET_WWAN_STATUS_ERROR,
IPV6_GET_WWAN_STATUS,
IPV6_GET_WWAN_POLICY_ERROR,
IPV6_GET_WWAN_POLICY_TECH,
IPV6_GET_WWAN_POLICY_3GPP,
IPV6_GET_WWAN_POLICY_3GPP2,
IPV6_GET_WWAN_POLICY_MAX
}
ipv6_get_state;


typedef enum
{
  DISABLED = 0,
  ENABLED,
  DISABLE_PnP
}enable_disable;

typedef enum
{
  ADD = 1,
  DELETE,
  MODIFY,
  ENABLE,
  NO_CHANGE
}operations;
///////////////////////////////////////////////////

typedef enum
{
  MOBILE_CONNECTION_PAGE_PAGE = 0,
  MOBILE_CONNECTION_PAGE_MASK,
  MOBILE_CONNECTION_PAGE_AUTO_CONNECT,
  MOBILE_CONNECTION_PAGE_AUTO_CONNECT_RESULT,
  MOBILE_CONNECTION_PAGE_ROAMING ,
  MOBILE_CONNECTION_PAGE_ROAMING_RESULT ,
  MOBILE_CONNECTION_PAGE_MAX //never used
}mobile_connection_field;

typedef enum {
	MAP_STATUS_PAGE = 0,
	MAP_MASK,
	MAP_STATUS,
	MAP_STATUS_RESULT,
	MAP_STATUS_MAX
}setmobileap_field;

typedef enum {
	NET_STATUS_PAGE = 0,
	NET_MASK,
	NET_STATUS,
	NET_SAVE_STATUS,
	NET_STATUS_RESULT,
	NET_STATUS_MAX
}setnetcnct_field;

typedef enum {
	USR_INFO_PAGE = 0,
	USR_INFO_MASK,
	USR_INFO_NAME,
	USR_INFO_PWD,
	USR_INFO_RESULT,
	USR_INFO_MAX
}setusrinfo_field;

typedef enum
{
	DELETE_DMZ_PAGE_PAGE,
	DELETE_DMZ_PAGE_MASK,
	DELETE_DMZ_PAGE_RESULT,
	DELETE_DMZ_PAGE_MAX
}delete_dmz_page_field;

typedef enum{
	GET_DMZ_PAGE_PAGE,
	GET_DMZ_PAGE_MASK,
	GET_DMZ_PAGE_VALID,
	GET_DMZ_PAGE_IP,
	GET_DMZ_PAGE_RESULT,
	GET_DMZ_PAGE_MAX
}get_dmz_page_field;


typedef enum
{
  GET_FIREWALL_STATUS_PAGE_PAGE = 0,
  GET_FIREWALL_STATUS_PAGE_MASK,
  GET_FIREWALL_STATUS_PAGE_FIREWALL_STATE,
  GET_FIREWALL_STATUS_PAGE_PACKETS_ALLOWED,
  GET_FIREWALL_STATUS_PAGE_RESULT,
  GET_FIREWALL_STATUS_PAGE_MAX
}get_firewall_status_page_field;


typedef enum{
	HOSTAPD_BASECFG_PAGE_PAGE = 0,
	HOSTAPD_BASECFG_PAGE_MASK,
	HOSTAPD_BASECFG_PAGE_AP_INDEX,
	HOSTAPD_BASECFG_PAGE_SSID,       
	HOSTAPD_BASECFG_PAGE_BROADCAST,       //0:enabled  1:disabled
	HOSTAPD_BASECFG_PAGE_AUTH_TYPE,       // WEP:OSA SKA AUTO   WPA:WPA WPA2 BOTH
	HOSTAPD_BASECFG_PAGE_WPA_PAIRWISE,	  // CCMP SKIP BOTH
    HOSTAPD_BASECFG_PAGE_WEP_KEY_STATUS,  // 0:WEP  1:CLOSE
    HOSTAPD_BASECFG_PAGE_WEP_DEFAULT_KEY, 
    HOSTAPD_BASECFG_PAGE_WPA_PASSPHRASE, 
	HOSTAPD_BASECFG_PAGE_WEP_KEY0,
	HOSTAPD_BASECFG_PAGE_WEP_KEY1,
	HOSTAPD_BASECFG_PAGE_WEP_KEY2,
	HOSTAPD_BASECFG_PAGE_WEP_KEY3,
  	HOSTAPD_BASECFG_PAGE_RESULT,  
  	HOSTAPD_BASECFG_PAGE_MAX		
}hostapd_basecfg_field;

typedef enum{
	WPA_SUPPLICANT_CFG_PAGE_PAGE = 0,
	WPA_SUPPLICANT_CFG_PAGE_MASK,
	WPA_SUPPLICANT_CFG_PAGE_AP_INDEX,
	WPA_SUPPLICANT_CFG_PAGE_SSID,
	WPA_SUPPLICANT_CFG_PAGE_WEP_KEY_STATUS,
	WPA_SUPPLICANT_CFG_PAGE_AUTH_TYPE,
	WPA_SUPPLICANT_CFG_PAGE_WPA_PASSPHRASE, 
  	WPA_SUPPLICANT_CFG_PAGE_RESULT,  
  	WPA_SUPPLICANT_CFG_PAGE_MAX		
}wpa_supplicant_cfg_field;

typedef enum
{
  HOSTAPD_EXTCFG_PAGE_PAGE = 0,
  HOSTAPD_EXTCFG_PAGE_MASK,
  HOSTAPD_EXTCFG_PAGE_AP_INDEX, 
  HOSTAPD_EXTCFG_PAGE_COUNTRY,
  HOSTAPD_EXTCFG_PAGE_CHANNEL,
  HOSTAPD_EXTCFG_PAGE_HW_MODE,
  HOSTAPD_EXTCFG_PAGE_AP_ISOLATE,
  HOSTAPD_EXTCFG_PAGE_HT_CAPAB,
  HOSTAPD_EXTCFG_PAGE_RESULT,   
  HOSTAPD_EXTCFG_PAGE_MAX
}hostapd_extcfg_field;

typedef enum
{
  HOSTAPD_MACFILTER_PAGE_PAGE = 0,
  HOSTAPD_MACFILTER_PAGE_MASK,
  HOSTAPD_MACFILTER_PAGE_FLAG,
  HOSTAPD_MACFILTER_PAGE_COUNT,
  HOSTAPD_MACFILTER_PAGE_SET_RESULT,
  HOSTAPD_MACFILTER_PAGE_ADDR0,
  HOSTAPD_MACFILTER_PAGE_ADDR1,
  HOSTAPD_MACFILTER_PAGE_ADDR2,  
  HOSTAPD_MACFILTER_PAGE_ADDR3,
  HOSTAPD_MACFILTER_PAGE_ADDR4,
  HOSTAPD_MACFILTER_PAGE_ADDR5,  
  HOSTAPD_MACFILTER_PAGE_ADDR6,
  HOSTAPD_MACFILTER_PAGE_ADDR7,
  HOSTAPD_MACFILTER_PAGE_ADDR8,  
  HOSTAPD_MACFILTER_PAGE_ADDR9,   
  HOSTAPD_MACFILTER_PAGE_ADDR10,
  HOSTAPD_MACFILTER_PAGE_ADDR11,
  HOSTAPD_MACFILTER_PAGE_ADDR12,  
  HOSTAPD_MACFILTER_PAGE_ADDR13,
  HOSTAPD_MACFILTER_PAGE_ADDR14,
  HOSTAPD_MACFILTER_PAGE_ADDR15,  
  HOSTAPD_MACFILTER_PAGE_ADDR16,
  HOSTAPD_MACFILTER_PAGE_ADDR17,
  HOSTAPD_MACFILTER_PAGE_ADDR18,  
  HOSTAPD_MACFILTER_PAGE_ADDR19,   
  HOSTAPD_MACFILTER_PAGE_GET_RESULT,    
  HOSTAPD_MACFILTER_PAGE_MAX 
}hostapd_macfilter_field;


typedef enum
{
  DHCP_PAGE_PAGE = 0,
  DHCP_PAGE_MASK,
  DHCP_PAGE_GW_IP,
  DHCP_PAGE_SUBNET_MASK,
  DHCP_PAGE_DHCP_MODE,
  DHCP_PAGE_DHCP_START_IP,
  DHCP_PAGE_DHCP_END_IP,
  DHCP_PAGE_DHCP_LEASE_TIME,
  DHCP_PAGE_RESULT,
  DHCP_PAGE_MAX
}dhcp_page_field;

typedef enum
{
  CREATE_PROFILE_PAGE_PAGE = 0,
  CREATE_PROFILE_PAGE_MASK,
  CREATE_PROFILE_PAGE_INDEX,
  CREATE_PROFILE_PAGE_PROFILE_NAME,
  CREATE_PROFILE_PAGE_APN_NAME,
  CREATE_PROFILE_PAGE_USERNAME,
  CREATE_PROFILE_PAGE_PASSWORD,
  CREATE_PROFILE_PAGE_RESULT,  
  CREATE_PROFILE_PAGE_MAX
}createprofile_field;

typedef enum
{
  MODIFY_PROFILE_PAGE_PAGE = 0,
  MODIFY_PROFILE_PAGE_MASK,
  MODIFY_PROFILE_PAGE_INDEX,
  MODIFY_PROFILE_PAGE_PROFILE_NAME,
  MODIFY_PROFILE_PAGE_APN_NAME,
  MODIFY_PROFILE_PAGE_USERNAME,
  MODIFY_PROFILE_PAGE_PASSWORD,
  MODIFY_PROFILE_PAGE_RESULT,  
  MODIFY_PROFILE_PAGE_MAX
}modifyprofile_field;
typedef enum
{
  DELETE_PROFILE_PAGE_PAGE = 0,
  DELETE_PROFILE_PAGE_MASK,
  DELETE_PROFILE_PAGE_INDEX,
  DELETE_PROFILE_PAGE_RESULT,  
  DELETE_PROFILE_PAGE_MAX
}deleteprofile_field;
typedef enum
{
  GET_PROFILE_PAGE_PAGE = 0,
  GET_PROFILE_PAGE_MASK,
  GET_PROFILE_PAGE_INDEX,
  //GET_PROFILE_PAGE_PROFILE_NAME,
  GET_PROFILE_PAGE_APN_NAME,
  GET_PROFILE_PAGE_USERNAME,
  GET_PROFILE_PAGE_PASSWORD,
  GET_PROFILE_PAGE_RESULT,  
  GET_PROFILE_PAGE_MAX
}getprofile_field;

typedef enum
{
  DEFAULT_PROFILE_PAGE_PAGE = 0,
  DEFAULT_PROFILE_PAGE_MASK,
  DEFAULT_PROFILE_PAGE_INDEX,
  DEFAULT_PROFILE_PAGE_RESULT,  
  DEFAULT_PROFILE_PAGE_MAX
}default_profile_field;


typedef enum
{
  GET_PROFILE_LIST_PAGE_PAGE = 0,
  GET_PROFILE_LIST_PAGE_MASK,
  GET_PROFILE_LIST_PAGE_PROTECT_INDEX,
  GET_PROFILE_LIST_PAGE_DEFAULT_INDEX,
  GET_PROFILE_LIST_PAGE_NUMBER,  
  GET_PROFILE_LIST_PAGE_PROFILENAME_1,
  GET_PROFILE_LIST_PAGE_PROFILENAME_2,  
  GET_PROFILE_LIST_PAGE_PROFILENAME_3,
  GET_PROFILE_LIST_PAGE_PROFILENAME_4,
  GET_PROFILE_LIST_PAGE_PROFILENAME_5,  
  GET_PROFILE_LIST_PAGE_PROFILENAME_6,
  GET_PROFILE_LIST_PAGE_PROFILENAME_7,
  GET_PROFILE_LIST_PAGE_PROFILENAME_8,  
  GET_PROFILE_LIST_PAGE_PROFILENAME_9,   
  GET_PROFILE_LIST_PAGE_PROFILENAME_10,
  GET_PROFILE_LIST_PAGE_PROFILENAME_11,  
  GET_PROFILE_LIST_PAGE_PROFILENAME_12,
  GET_PROFILE_LIST_PAGE_PROFILENAME_13,
  GET_PROFILE_LIST_PAGE_PROFILENAME_14,  
  GET_PROFILE_LIST_PAGE_PROFILENAME_15,   
  GET_PROFILE_LIST_PAGE_PROFILENAME_16, 
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_1,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_2,  
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_3,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_4,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_5,  
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_6,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_7,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_8,  
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_9,   
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_10,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_11,  
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_12,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_13,
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_14,  
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_15,   
  GET_PROFILE_LIST_PAGE_PROFILEINDEX_16,  
  GET_PROFILE_LIST_PAGE_RESULT,  
  GET_PROFILE_LIST_PAGE_MAX
}getprofile_list_field;

typedef enum
{
  GET_DMS_STATUS_PAGE_PAGE = 0,
  GET_DMS_STATUS_PAGE_MASK,
  GET_DMS_STATUS_PAGE_IMEI,
  GET_DMS_STATUS_PAGE_IMSI,
  GET_DMS_STATUS_PAGE_HWREV,
  GET_DMS_STATUS_PAGE_SWVERSION,
  GET_DMS_STATUS_PAGE_UIM_STATE,
  GET_DMS_STATUS_PAGE_POWER_STATUS,  
  GET_DMS_STATUS_PAGE_BATTERY_LVL, 
  GET_DMS_STATUS_PAGE_WLAN_MAC,  
  GET_DMS_STATUS_PAGE_WAN_IP,
  GET_DMS_STATUS_PAGE_RESULT,  
  GET_DMS_STATUS_PAGE_MAX
}get_dms_status_field;

typedef enum
{
  PING_STATE_PAGE_PAGE = 0,
  PING_STATE_PAGE_MASK,
  PING_STATE_PAGE_PING_DISABLED,
  PING_STATE_PAGE_RESULT,
  PING_STATE_PAGE_MAX
}ping_state_field;

typedef enum
{
  SIM_PIN_STATE_PAGE_PAGE = 0,
  SIM_PIN_STATE_PAGE_MASK,
  SIM_PIN1_STATE_PAGE_STATE,
  SIM_PIN1_STATE_PAGE_VERIFY_LEFT,
  SIM_PIN1_STATE_PAGE_UNBLOCK_LEFT, 
  SIM_PIN_STATE_PAGE_RESULT,
  SIM_PIN_STATE_PAGE_MAX
}sim_pin_state_field;

typedef enum
{
  SIM_PIN_PROTECTION_PAGE_PAGE = 0,
  SIM_PIN_PROTECTION_PAGE_MASK,
  SIM_PIN_PROTECTION_PAGE_ID,
  SIM_PIN_PROTECTION_PAGE_ENABLED,
  SIM_PIN_PROTECTION_PAGE_VALUE,
  SIM_PIN_PROTECTION_PAGE_STATE, 
  SIM_PIN_PROTECTION_PAGE_VERIFY_LEFT,
  SIM_PIN_PROTECTION_PAGE_UNBLOCK_LEFT,  
  SIM_PIN_PROTECTION_PAGE_RESULT,
  SIM_PIN_PROTECTION_PAGE_MAX
}sim_pin_protection_field;

typedef enum
{
  SIM_PIN_VERIFY_PAGE_PAGE = 0,
  SIM_PIN_VERIFY_PAGE_MASK,
  SIM_PIN_VERIFY_PAGE_ID,
  SIM_PIN_VERIFY_PAGE_VALUE,
  SIM_PIN_VERIFY_PAGE_STATE, 
  SIM_PIN_VERIFY_PAGE_VERIFY_LEFT,
  SIM_PIN_VERIFY_PAGE_UNBLOCK_LEFT,
  SIM_PIN_VERIFY_PAGE_RESULT,
  SIM_PIN_VERIFY_PAGE_MAX
}sim_pin_verify_field;

typedef enum
{
  SIM_PIN_CHANGE_PAGE_PAGE = 0,
  SIM_PIN_CHANGE_PAGE_MASK,
  SIM_PIN_CHANGE_PAGE_ID,
  SIM_PIN_CHANGE_PAGE_OLD_VALUE,
  SIM_PIN_CHANGE_PAGE_NEW_VALUE,
  SIM_PIN_CHANGE_PAGE_STATE,  
  SIM_PIN_CHANGE_PAGE_VERIFY_LEFT,
  SIM_PIN_CHANGE_PAGE_UNBLOCK_LEFT,  
  SIM_PIN_CHANGE_PAGE_RESULT,
  SIM_PIN_CHANGE_PAGE_MAX
}sim_pin_change_field;

typedef enum
{
  SIM_PIN_UNBLOCK_PAGE_PAGE = 0,
  SIM_PIN_UNBLOCK_PAGE_MASK,
  SIM_PIN_UNBLOCK_PAGE_ID,
  SIM_PIN_UNBLOCK_PAGE_PUK_VALUE,
  SIM_PIN_UNBLOCK_PAGE_PIN_VALUE,
  SIM_PIN_UNBLOCK_PAGE_STATE, 
  SIM_PIN_UNBLOCK_PAGE_VERIFY_LEFT,
  SIM_PIN_UNBLOCK_PAGE_UNBLOCK_LEFT,  
  SIM_PIN_UNBLOCK_PAGE_RESULT,
  SIM_PIN_UNBLOCK_PAGE_MAX
}sim_pin_unblock_field;

typedef enum
{
  GET_WMS_LIST_PAGE_PAGE = 0,
  GET_WMS_LIST_PAGE_MASK,
  GET_WMS_LIST_PAGE_STORAGE,
  GET_WMS_LIST_PAGE_TAG_VALID,
  GET_WMS_LIST_PAGE_TAG,
  GET_WMS_LIST_PAGE_MODE_VALID,
  GET_WMS_LIST_PAGE_MODE,
  GET_WMS_LIST_PAGE_RESULT,
  GET_WMS_LIST_PAGE_INDEX_RET,
  GET_WMS_LIST_PAGE_TAG_RET,
  GET_WMS_LIST_PAGE_MAX
}get_wms_list_field;

typedef enum
{
  WMS_READ_PAGE_PAGE = 0,
  WMS_READ_PAGE_MASK,
  WMS_READ_PAGE_STORAGE_TYPE,
  WMS_READ_PAGE_STORAGE_INDEX,
  WMS_READ_PAGE_IMS_VALID,
  WMS_READ_PAGE_IMS,  
  WMS_READ_PAGE_MODE_VALID,
  WMS_READ_PAGE_MODE,
  WMS_READ_PAGE_TAG_TYPE,
  WMS_READ_PAGE_FORMAT,
  WMS_READ_PAGE_PHONENUM,
  WMS_READ_PAGE_TIME,
  WMS_READ_PAGE_DATA_LEN,
  WMS_READ_PAGE_DATA,
  WMS_READ_PAGE_ENCODE_TYPE,
  WMS_READ_PAGE_RESULT,
  WMS_READ_PAGE_MAX
}wms_read_field;
typedef enum
{
  WMS_WRITE_PAGE_PAGE = 0,
  WMS_WRITE_PAGE_MASK,
  WMS_WRITE_PAGE_STORAGE_TYPE,
  WMS_WRITE_PAGE_TAG_TYPE,
  WMS_WRITE_PAGE_FORMAT,
  WMS_WRITE_PAGE_PHONENUM,
  WMS_WRITE_PAGE_TIME,
  WMS_WRITE_PAGE_ENCODE_TYPE,
  WMS_WRITE_PAGE_DATA_LEN,
  WMS_WRITE_PAGE_DATA,
  WMS_WRITE_PAGE_STORAGE_INDEX,
  WMS_WRITE_PAGE_RESULT,
  WMS_WRITE_PAGE_MAX
}wms_write_field;

typedef enum
{
  WMS_SEND_PAGE_PAGE = 0,
  WMS_SEND_PAGE_MASK,
  WMS_SEND_PAGE_FORMAT,
  WMS_SEND_PAGE_PHONENUM,
  WMS_SEND_PAGE_TIME,
  WMS_SEND_PAGE_ENCODE_TYPE,
  WMS_SEND_PAGE_DATA_LEN,
  WMS_SEND_PAGE_DATA,
  WMS_SEND_PAGE_RESULT,
  WMS_SEND_PAGE_MAX
}wms_send_field;

typedef enum
{
  WMS_SEND_FROMMEM_PAGE_PAGE = 0,
  WMS_SEND_FROMMEM_PAGE_MASK,
  WMS_SEND_FROMMEM_PAGE_STORAGE_TYPE,
  WMS_SEND_FROMMEM_PAGE_STORAGE_INDEX,
  WMS_SEND_FROMMEM_PAGE_RESULT,
  WMS_SEND_FROMMEM_PAGE_MAX
}wms_send_from_mem_field;


typedef enum
{
  WMS_DELETE_PAGE_PAGE = 0,
  WMS_DELETE_PAGE_MASK,
  WMS_DELETE_PAGE_INDEX_VALID,
  WMS_DELETE_PAGE_INDEX,
  WMS_DELETE_PAGE_STORAGE,
  WMS_DELETE_PAGE_MODE_VALID,
  WMS_DELETE_PAGE_MODE,
  WMS_DELETE_PAGE_TAG_VALID,
  WMS_DELETE_PAGE_TAG,
  WMS_DELETE_PAGE_RESULT,
  WMS_DELETE_PAGE_MAX
}wms_delete_field;

typedef enum
{
  WMS_REPORT_PAGE_PAGE = 0,
  WMS_REPORT_PAGE_MASK,
  WMS_REPORT_PAGE_ENABLED,
  WMS_REPORT_PAGE_RESULT,
  WMS_REPORT_PAGE_MAX
}wms_report_field;

typedef enum
{
  WMS_STORE_MAX_PAGE_PAGE = 0,
  WMS_STORE_MAX_PAGE_MASK,
  WMS_STORE_MAX_PAGE_STORAGE_TYPE,
  WMS_STORE_MAX_PAGE_FREE_SLOTS,
  WMS_STORE_MAX_PAGE_MAX_SIZE,
  WMS_STORE_MAX_PAGE_RESULT,
  WMS_STORE_MAX_PAGE_MAX
}wms_store_max_field;

typedef enum
{
  WMS_MEM_STATUS_PAGE_PAGE = 0,
  WMS_MEM_STATUS_PAGE_MASK,
  WMS_MEM_STATUS_PAGE_MEM_VALID,
  WMS_MEM_STATUS_PAGE_MEM,
  WMS_MEM_STATUS_PAGE_RESULT,
  WMS_MEM_STATUS_PAGE_MAX
}wms_mem_status_field;

typedef enum
{
  WMS_MODIFY_TAG_PAGE_PAGE = 0,
  WMS_MODIFY_TAG_PAGE_MASK,
  WMS_MODIFY_TAG_PAGE_TAG_TYPE,
  WMS_MODIFY_TAG_PAGE_STORAGE_TYPE,
  WMS_MODIFY_TAG_PAGE_STORAGE_INDEX,
  WMS_MODIFY_TAG_PAGE_RESULT,
  WMS_MODIFY_TAG_PAGE_MAX
}wms_modify_tag_field;


typedef enum
{
  SYSTEM_PREFERENCE_PAGE_PAGE = 0,
  SYSTEM_PREFERENCE_PAGE_MASK,
  SYSTEM_PREFERENCE_PAGE_MODE,  
  SYSTEM_PREFERENCE_PAGE_NETWORK,
  SYSTEM_PREFERENCE_PAGE_SUPPORT,
  SYSTEM_PREFERENCE_PAGE_RESULT,
  SYSTEM_PREFERENCE_PAGE_MAX
}system_preference_field;

typedef enum
{
  SUPPORTED_PREFERENCE_PAGE_PAGE = 0,
  SUPPORTED_PREFERENCE_PAGE_MASK,
  SUPPORTED_PREFERENCE_PAGE_MODE,  
  SUPPORTED_PREFERENCE_PAGE_RESULT,
  SUPPORTED_PREFERENCE_PAGE_MAX
}supported_preference_field;


typedef enum
{
  GET_HEAD_STATUS_PAGE_PAGE = 0,
  GET_HEAD_STATUS_PAGE_MASK,
  GET_HEAD_STATUS_MMS,
  GET_HEAD_STATUS_SINGAL,
  GET_HEAD_STATUS_WAN,
  GET_HEAD_STATUS_WLAN,
  GET_HEAD_STATUS_CHARGING,
  GET_HEAD_BATTERY_LVL,
  GET_HEAD_NET_TRAFFIC_RX,
  GET_HEAD_NET_TRAFFIC_TX,
  GET_HEAD_PLMN,
  GET_HEAD_WLAN_CLIENTS,
  GET_HEAD_STATUS_PAGE_RESULT,  
  GET_HEAD_STATUS_PAGE_MAX
}get_head_status_field;

typedef enum
{
  STA_IP_PAGE = 0,
  STA_IP_MASK,
  STA_IP_ADDR,
  STA_IP_RESULT,
  STA_IP_MAX
}sta_ip_field;

#ifdef BUILD_VERSION_WIFI_RTL
typedef enum {
	STA_INIT_STATUS_PAGE = 0,
	STA_INIT_MASK,
	STA_INIT_STATUS,
	STA_INIT_STATUS_RESULT,
	STA_INIT_STATUS_MAX
}rtl_sta_init_field;
#endif

typedef enum {
        DISABLE_MAC_ACL = 1,
        ACCEPT_UNLESS_DENIED = 2,
        DENY_UNLESS_ACCEPTED = 3,
        USE_EXTERNAL_RADIUS_AUTH = 4
}macaddr_acl;


typedef enum{
	E_MIN = 0,
	E_NULL = 0,
	E_WEP,
	E_TKIP,
	E_AES,
	E_AES_TKIP,
	E_MAX = E_AES_TKIP
}s_encrypt_type;

typedef enum{
	AUTH_MIN  = 0,
	AUTH_AUTO = 0,
	AUTH_OPEN,
	AUTH_SHARE,
	AUTH_WPA,
	AUTH_WPA2,
	AUTH_WPA_WPA2,
	AUTH_MAX = AUTH_WPA_WPA2
}s_auth_type;


#endif /* _QCMAP_CLIENT_DEF_H */
